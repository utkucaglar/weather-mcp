/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { collectExtraKeys as collectExtraKeys$, safeParse, } from "../../lib/schemas.js";
export const ToolType = {
    Object: "object",
};
/** @internal */
export const ToolType$inboundSchema = z
    .nativeEnum(ToolType);
/** @internal */
export const ToolType$outboundSchema = ToolType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ToolType$;
(function (ToolType$) {
    /** @deprecated use `ToolType$inboundSchema` instead. */
    ToolType$.inboundSchema = ToolType$inboundSchema;
    /** @deprecated use `ToolType$outboundSchema` instead. */
    ToolType$.outboundSchema = ToolType$outboundSchema;
})(ToolType$ || (ToolType$ = {}));
/** @internal */
export const InputSchema$inboundSchema = collectExtraKeys$(z.object({
    type: ToolType$inboundSchema,
    properties: z.record(z.any()).optional(),
}).catchall(z.any()), "additionalProperties", true);
/** @internal */
export const InputSchema$outboundSchema = z.object({
    type: ToolType$outboundSchema,
    properties: z.record(z.any()).optional(),
    additionalProperties: z.record(z.any()),
}).transform((v) => {
    return {
        ...v.additionalProperties,
        ...remap$(v, {
            additionalProperties: null,
        }),
    };
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var InputSchema$;
(function (InputSchema$) {
    /** @deprecated use `InputSchema$inboundSchema` instead. */
    InputSchema$.inboundSchema = InputSchema$inboundSchema;
    /** @deprecated use `InputSchema$outboundSchema` instead. */
    InputSchema$.outboundSchema = InputSchema$outboundSchema;
})(InputSchema$ || (InputSchema$ = {}));
export function inputSchemaToJSON(inputSchema) {
    return JSON.stringify(InputSchema$outboundSchema.parse(inputSchema));
}
export function inputSchemaFromJSON(jsonString) {
    return safeParse(jsonString, (x) => InputSchema$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'InputSchema' from JSON`);
}
/** @internal */
export const Tool$inboundSchema = z
    .object({
    name: z.string(),
    description: z.nullable(z.string()).optional(),
    inputSchema: z.lazy(() => InputSchema$inboundSchema),
});
/** @internal */
export const Tool$outboundSchema = z.object({
    name: z.string(),
    description: z.nullable(z.string()).optional(),
    inputSchema: z.lazy(() => InputSchema$outboundSchema),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Tool$;
(function (Tool$) {
    /** @deprecated use `Tool$inboundSchema` instead. */
    Tool$.inboundSchema = Tool$inboundSchema;
    /** @deprecated use `Tool$outboundSchema` instead. */
    Tool$.outboundSchema = Tool$outboundSchema;
})(Tool$ || (Tool$ = {}));
export function toolToJSON(tool) {
    return JSON.stringify(Tool$outboundSchema.parse(tool));
}
export function toolFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Tool$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Tool' from JSON`);
}
//# sourceMappingURL=tool.js.map