/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
/**
 * Connection type
 */
export const ConnectionInfoType = {
    Http: "http",
    Stdio: "stdio",
};
/** @internal */
export const ConnectionInfoType$inboundSchema = z.nativeEnum(ConnectionInfoType);
/** @internal */
export const ConnectionInfoType$outboundSchema = ConnectionInfoType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ConnectionInfoType$;
(function (ConnectionInfoType$) {
    /** @deprecated use `ConnectionInfoType$inboundSchema` instead. */
    ConnectionInfoType$.inboundSchema = ConnectionInfoType$inboundSchema;
    /** @deprecated use `ConnectionInfoType$outboundSchema` instead. */
    ConnectionInfoType$.outboundSchema = ConnectionInfoType$outboundSchema;
})(ConnectionInfoType$ || (ConnectionInfoType$ = {}));
/** @internal */
export const ConnectionInfo$inboundSchema = z.object({
    type: ConnectionInfoType$inboundSchema,
    deploymentUrl: z.string().optional(),
    configSchema: z.record(z.any()),
    published: z.boolean().optional(),
    stdioFunction: z.string().optional(),
});
/** @internal */
export const ConnectionInfo$outboundSchema = z.object({
    type: ConnectionInfoType$outboundSchema,
    deploymentUrl: z.string().optional(),
    configSchema: z.record(z.any()),
    published: z.boolean().optional(),
    stdioFunction: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ConnectionInfo$;
(function (ConnectionInfo$) {
    /** @deprecated use `ConnectionInfo$inboundSchema` instead. */
    ConnectionInfo$.inboundSchema = ConnectionInfo$inboundSchema;
    /** @deprecated use `ConnectionInfo$outboundSchema` instead. */
    ConnectionInfo$.outboundSchema = ConnectionInfo$outboundSchema;
})(ConnectionInfo$ || (ConnectionInfo$ = {}));
export function connectionInfoToJSON(connectionInfo) {
    return JSON.stringify(ConnectionInfo$outboundSchema.parse(connectionInfo));
}
export function connectionInfoFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ConnectionInfo$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ConnectionInfo' from JSON`);
}
//# sourceMappingURL=connectioninfo.js.map