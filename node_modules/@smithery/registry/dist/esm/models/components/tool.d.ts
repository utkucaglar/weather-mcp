import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export declare const ToolType: {
    readonly Object: "object";
};
export type ToolType = ClosedEnum<typeof ToolType>;
/**
 * JSON Schema defining the required parameters for the tool
 */
export type InputSchema = {
    type: ToolType;
    properties?: {
        [k: string]: any;
    } | undefined;
    additionalProperties?: {
        [k: string]: any;
    };
};
export type Tool = {
    /**
     * Name of the tool
     */
    name: string;
    /**
     * Description of the tool
     */
    description?: string | null | undefined;
    /**
     * JSON Schema defining the required parameters for the tool
     */
    inputSchema: InputSchema;
};
/** @internal */
export declare const ToolType$inboundSchema: z.ZodNativeEnum<typeof ToolType>;
/** @internal */
export declare const ToolType$outboundSchema: z.ZodNativeEnum<typeof ToolType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ToolType$ {
    /** @deprecated use `ToolType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Object: "object";
    }>;
    /** @deprecated use `ToolType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Object: "object";
    }>;
}
/** @internal */
export declare const InputSchema$inboundSchema: z.ZodType<InputSchema, z.ZodTypeDef, unknown>;
/** @internal */
export type InputSchema$Outbound = {
    type: string;
    properties?: {
        [k: string]: any;
    } | undefined;
    [additionalProperties: string]: unknown;
};
/** @internal */
export declare const InputSchema$outboundSchema: z.ZodType<InputSchema$Outbound, z.ZodTypeDef, InputSchema>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace InputSchema$ {
    /** @deprecated use `InputSchema$inboundSchema` instead. */
    const inboundSchema: z.ZodType<InputSchema, z.ZodTypeDef, unknown>;
    /** @deprecated use `InputSchema$outboundSchema` instead. */
    const outboundSchema: z.ZodType<InputSchema$Outbound, z.ZodTypeDef, InputSchema>;
    /** @deprecated use `InputSchema$Outbound` instead. */
    type Outbound = InputSchema$Outbound;
}
export declare function inputSchemaToJSON(inputSchema: InputSchema): string;
export declare function inputSchemaFromJSON(jsonString: string): SafeParseResult<InputSchema, SDKValidationError>;
/** @internal */
export declare const Tool$inboundSchema: z.ZodType<Tool, z.ZodTypeDef, unknown>;
/** @internal */
export type Tool$Outbound = {
    name: string;
    description?: string | null | undefined;
    inputSchema: InputSchema$Outbound;
};
/** @internal */
export declare const Tool$outboundSchema: z.ZodType<Tool$Outbound, z.ZodTypeDef, Tool>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Tool$ {
    /** @deprecated use `Tool$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Tool, z.ZodTypeDef, unknown>;
    /** @deprecated use `Tool$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Tool$Outbound, z.ZodTypeDef, Tool>;
    /** @deprecated use `Tool$Outbound` instead. */
    type Outbound = Tool$Outbound;
}
export declare function toolToJSON(tool: Tool): string;
export declare function toolFromJSON(jsonString: string): SafeParseResult<Tool, SDKValidationError>;
//# sourceMappingURL=tool.d.ts.map