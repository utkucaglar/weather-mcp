/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ConnectionInfo$inboundSchema, ConnectionInfo$outboundSchema, } from "./connectioninfo.js";
import { Tool$inboundSchema, Tool$outboundSchema, } from "./tool.js";
/** @internal */
export const ServerDetailResponseSecurity$inboundSchema = z.object({
    scanPassed: z.nullable(z.boolean()).optional(),
});
/** @internal */
export const ServerDetailResponseSecurity$outboundSchema = z.object({
    scanPassed: z.nullable(z.boolean()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ServerDetailResponseSecurity$;
(function (ServerDetailResponseSecurity$) {
    /** @deprecated use `ServerDetailResponseSecurity$inboundSchema` instead. */
    ServerDetailResponseSecurity$.inboundSchema = ServerDetailResponseSecurity$inboundSchema;
    /** @deprecated use `ServerDetailResponseSecurity$outboundSchema` instead. */
    ServerDetailResponseSecurity$.outboundSchema = ServerDetailResponseSecurity$outboundSchema;
})(ServerDetailResponseSecurity$ || (ServerDetailResponseSecurity$ = {}));
export function serverDetailResponseSecurityToJSON(serverDetailResponseSecurity) {
    return JSON.stringify(ServerDetailResponseSecurity$outboundSchema.parse(serverDetailResponseSecurity));
}
export function serverDetailResponseSecurityFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ServerDetailResponseSecurity$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ServerDetailResponseSecurity' from JSON`);
}
/** @internal */
export const ServerDetailResponse$inboundSchema = z.object({
    qualifiedName: z.string(),
    displayName: z.string(),
    iconUrl: z.nullable(z.string()).optional(),
    remote: z.boolean().optional(),
    connections: z.array(ConnectionInfo$inboundSchema),
    security: z.nullable(z.lazy(() => ServerDetailResponseSecurity$inboundSchema))
        .optional(),
    tools: z.nullable(z.array(Tool$inboundSchema)).optional(),
});
/** @internal */
export const ServerDetailResponse$outboundSchema = z.object({
    qualifiedName: z.string(),
    displayName: z.string(),
    iconUrl: z.nullable(z.string()).optional(),
    remote: z.boolean().optional(),
    connections: z.array(ConnectionInfo$outboundSchema),
    security: z.nullable(z.lazy(() => ServerDetailResponseSecurity$outboundSchema)).optional(),
    tools: z.nullable(z.array(Tool$outboundSchema)).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ServerDetailResponse$;
(function (ServerDetailResponse$) {
    /** @deprecated use `ServerDetailResponse$inboundSchema` instead. */
    ServerDetailResponse$.inboundSchema = ServerDetailResponse$inboundSchema;
    /** @deprecated use `ServerDetailResponse$outboundSchema` instead. */
    ServerDetailResponse$.outboundSchema = ServerDetailResponse$outboundSchema;
})(ServerDetailResponse$ || (ServerDetailResponse$ = {}));
export function serverDetailResponseToJSON(serverDetailResponse) {
    return JSON.stringify(ServerDetailResponse$outboundSchema.parse(serverDetailResponse));
}
export function serverDetailResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ServerDetailResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ServerDetailResponse' from JSON`);
}
//# sourceMappingURL=serverdetailresponse.js.map