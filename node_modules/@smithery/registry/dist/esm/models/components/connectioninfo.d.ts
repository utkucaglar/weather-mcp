import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
/**
 * Connection type
 */
export declare const ConnectionInfoType: {
    readonly Http: "http";
    readonly Stdio: "stdio";
};
/**
 * Connection type
 */
export type ConnectionInfoType = ClosedEnum<typeof ConnectionInfoType>;
export type ConnectionInfo = {
    /**
     * Connection type
     */
    type: ConnectionInfoType;
    /**
     * HTTP URL to connect to (for http type)
     */
    deploymentUrl?: string | undefined;
    /**
     * JSON Schema defining required configuration options
     */
    configSchema: {
        [k: string]: any;
    };
    /**
     * True if the server is published on `npm`, `pypi`, or `uv` and runnable without users needing to clone the source code (for stdio type).
     */
    published?: boolean | undefined;
    /**
     * A lambda Javascript function that takes in the config object and returns a StdioConnection object (for stdio type).
     */
    stdioFunction?: string | undefined;
};
/** @internal */
export declare const ConnectionInfoType$inboundSchema: z.ZodNativeEnum<typeof ConnectionInfoType>;
/** @internal */
export declare const ConnectionInfoType$outboundSchema: z.ZodNativeEnum<typeof ConnectionInfoType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ConnectionInfoType$ {
    /** @deprecated use `ConnectionInfoType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Http: "http";
        readonly Stdio: "stdio";
    }>;
    /** @deprecated use `ConnectionInfoType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Http: "http";
        readonly Stdio: "stdio";
    }>;
}
/** @internal */
export declare const ConnectionInfo$inboundSchema: z.ZodType<ConnectionInfo, z.ZodTypeDef, unknown>;
/** @internal */
export type ConnectionInfo$Outbound = {
    type: string;
    deploymentUrl?: string | undefined;
    configSchema: {
        [k: string]: any;
    };
    published?: boolean | undefined;
    stdioFunction?: string | undefined;
};
/** @internal */
export declare const ConnectionInfo$outboundSchema: z.ZodType<ConnectionInfo$Outbound, z.ZodTypeDef, ConnectionInfo>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ConnectionInfo$ {
    /** @deprecated use `ConnectionInfo$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ConnectionInfo, z.ZodTypeDef, unknown>;
    /** @deprecated use `ConnectionInfo$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ConnectionInfo$Outbound, z.ZodTypeDef, ConnectionInfo>;
    /** @deprecated use `ConnectionInfo$Outbound` instead. */
    type Outbound = ConnectionInfo$Outbound;
}
export declare function connectionInfoToJSON(connectionInfo: ConnectionInfo): string;
export declare function connectionInfoFromJSON(jsonString: string): SafeParseResult<ConnectionInfo, SDKValidationError>;
//# sourceMappingURL=connectioninfo.d.ts.map