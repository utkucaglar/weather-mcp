/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
/**
 * Server not found
 */
export class NotFoundError extends Error {
    constructor(err) {
        const message = "message" in err && typeof err.message === "string"
            ? err.message
            : `API error occurred: ${JSON.stringify(err)}`;
        super(message);
        this.data$ = err;
        if (err.error != null)
            this.error = err.error;
        this.name = "NotFoundError";
    }
}
/** @internal */
export const NotFoundError$inboundSchema = z.object({
    error: z.string().optional(),
})
    .transform((v) => {
    return new NotFoundError(v);
});
/** @internal */
export const NotFoundError$outboundSchema = z.instanceof(NotFoundError)
    .transform(v => v.data$)
    .pipe(z.object({
    error: z.string().optional(),
}));
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var NotFoundError$;
(function (NotFoundError$) {
    /** @deprecated use `NotFoundError$inboundSchema` instead. */
    NotFoundError$.inboundSchema = NotFoundError$inboundSchema;
    /** @deprecated use `NotFoundError$outboundSchema` instead. */
    NotFoundError$.outboundSchema = NotFoundError$outboundSchema;
})(NotFoundError$ || (NotFoundError$ = {}));
//# sourceMappingURL=getserver.js.map