"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.serversList = serversList;
const dlv_js_1 = require("../lib/dlv.js");
const encodings_js_1 = require("../lib/encodings.js");
const M = __importStar(require("../lib/matchers.js"));
const primitives_js_1 = require("../lib/primitives.js");
const schemas_js_1 = require("../lib/schemas.js");
const security_js_1 = require("../lib/security.js");
const url_js_1 = require("../lib/url.js");
const errors = __importStar(require("../models/errors/index.js"));
const operations = __importStar(require("../models/operations/index.js"));
const async_js_1 = require("../types/async.js");
const operations_js_1 = require("../types/operations.js");
/**
 * List Servers
 *
 * @remarks
 * Retrieves a paginated list of all available servers with optional filtering.
 */
function serversList(client, request, options) {
    return new async_js_1.APIPromise($do(client, request, options));
}
async function $do(client, request, options) {
    const parsed = (0, schemas_js_1.safeParse)(request, (value) => operations.ListServersRequest$outboundSchema.parse(value), "Input validation failed");
    if (!parsed.ok) {
        return [(0, operations_js_1.haltIterator)(parsed), { status: "invalid" }];
    }
    const payload = parsed.value;
    const body = null;
    const path = (0, url_js_1.pathToFunc)("/servers")();
    const query = (0, encodings_js_1.encodeFormQuery)({
        "page": payload.page,
        "pageSize": payload.pageSize,
        "q": payload.q,
    });
    const headers = new Headers((0, primitives_js_1.compactMap)({
        Accept: "application/json",
    }));
    const secConfig = await (0, security_js_1.extractSecurity)(client._options.bearerAuth);
    const securityInput = secConfig == null ? {} : { bearerAuth: secConfig };
    const requestSecurity = (0, security_js_1.resolveGlobalSecurity)(securityInput);
    const context = {
        baseURL: options?.serverURL ?? client._baseURL ?? "",
        operationID: "listServers",
        oAuth2Scopes: [],
        resolvedSecurity: requestSecurity,
        securitySource: client._options.bearerAuth,
        retryConfig: options?.retries
            || client._options.retryConfig
            || {
                strategy: "backoff",
                backoff: {
                    initialInterval: 500,
                    maxInterval: 60000,
                    exponent: 1.5,
                    maxElapsedTime: 3600000,
                },
                retryConnectionErrors: true,
            }
            || { strategy: "none" },
        retryCodes: options?.retryCodes || ["5XX"],
    };
    const requestRes = client._createRequest(context, {
        security: requestSecurity,
        method: "GET",
        baseURL: options?.serverURL,
        path: path,
        headers: headers,
        query: query,
        body: body,
        timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1,
    }, options);
    if (!requestRes.ok) {
        return [(0, operations_js_1.haltIterator)(requestRes), { status: "invalid" }];
    }
    const req = requestRes.value;
    const doResult = await client._do(req, {
        context,
        errorCodes: ["401", "4XX", "500", "5XX"],
        retryConfig: context.retryConfig,
        retryCodes: context.retryCodes,
    });
    if (!doResult.ok) {
        return [(0, operations_js_1.haltIterator)(doResult), { status: "request-error", request: req }];
    }
    const response = doResult.value;
    const responseFields = {
        HttpMeta: { Response: response, Request: req },
    };
    const [result, raw] = await M.match(M.json(200, operations.ListServersResponse$inboundSchema, {
        key: "Result",
    }), M.jsonErr(401, errors.UnauthorizedError$inboundSchema), M.jsonErr(500, errors.ServerError$inboundSchema), M.fail("4XX"), M.fail("5XX"))(response, { extraFields: responseFields });
    if (!result.ok) {
        return [(0, operations_js_1.haltIterator)(result), {
                status: "complete",
                request: req,
                response,
            }];
    }
    const nextFunc = (responseData) => {
        const page = request?.page ?? 1;
        const nextPage = page + 1;
        if (!responseData) {
            return { next: () => null };
        }
        const results = (0, dlv_js_1.dlv)(responseData, "data.resultArray");
        if (!Array.isArray(results) || !results.length) {
            return { next: () => null };
        }
        const nextVal = () => serversList(client, {
            ...request,
            page: nextPage,
        }, options);
        return { next: nextVal, "~next": { page: nextPage } };
    };
    const page = { ...result, ...nextFunc(raw) };
    return [{ ...page, ...(0, operations_js_1.createPageIterator)(page, (v) => !v.ok) }, {
            status: "complete",
            request: req,
            response,
        }];
}
//# sourceMappingURL=serversList.js.map